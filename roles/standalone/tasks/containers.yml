---
- name: Run dstat on the standalone prior to standalone tasks
  include_role:
    name: validate-perf

- name: Gather ansible distribution
  setup:
    gather_subset: "!min,distribution"
  when: ansible_distribution is not defined

- name: Cache tempest network cidr
  set_fact:
    tempest_cidr: "{{ undercloud_network_cidr }}"
  when: use_os_tempest is defined

# tasks file for all_in_one

- name: Set hostname
  hostname:
    name: "{{ standalone_hostname }}"
  become: true
  when: not enable_tls|default(false)|bool

- name: set virtual-control-ip for TLS deployments
  set_fact:
    standalone_control_virtual_ip: "{{ undercloud_network_cidr|nthhost(210) }}"
    cacheable: true
  when: enable_tls|default(false)|bool

- name: Add DNS and NTP server settings for TLS deployments
  become: true
  blockinfile:
    path: "{{ overcloud_templates_path }}/ci/environments/standalone-ipa.yaml"
    insertafter: "  HAProxyExternalNetwork: ctlplane"
    block: |
      # Custom IPA params
        DnsServers: ["{{ subnode_1_ip }}"]
  when: enable_tls|default(false)|bool

# standalone params
- name: Create the standalone params
  template:
    src: "{{ standalone_config }}"
    dest: "{{ working_dir }}/standalone_parameters.yaml"
    mode: 0755

- name: Remove settings that will be added with TLS
  lineinfile:
    path: "{{ working_dir }}/standalone_parameters.yaml"
    regexp: "{{ item }}"
    state: absent
    backup: true
  with_items:
    - '  CloudName: 192.168.24.1'
    - '  CertmongerCA: local'
    - '  DnsServers: (.*)'
  when: enable_tls|default(false)|bool

- name: Build and push containers into a local registry
  when:
    - build_container_images|default(false)|bool
  include_role:
    name: container-build
  vars:
    container_registry_namespace: "{{ docker_registry_namespace }}"
    container_tag: "{{ container_build_id }}"

- name: Run container prepare legacy
  when:
    - release in ['train']
  block:

    - name: Create container parameters script
      template:
        src: "{{ standalone_container_prep_script }}"
        dest: "{{ working_dir }}/standalone-container-prep.sh"
        mode: "0755"

    - name: Run container prepare
      shell: >
        set -o pipefail &&
        {{ working_dir }}/standalone-container-prep.sh 2>&1 {{ timestamper_cmd }} > {{ working_dir }}/{{ standalone_container_prep_log }}
      changed_when: true

- name: Run container prepare via tripleo-operator-ansible
  when:
    - release not in ['train']
  collections:
    - tripleo.operator
  include_role:
    name: tripleo_container_image_prepare_default
  vars:
    tripleo_container_image_prepare_default_debug: true
    tripleo_container_image_prepare_default_output_env_file: "{{ working_dir }}/containers-prepare-parameters.yaml"

# update the registry to rdo or docker.io
- name: update registry if needed in container-prepare-parameters.yaml
  when:
    - docker_registry_host != '' and docker_registry_namespace != ''
  replace:
    path: "{{ working_dir }}/containers-prepare-parameters.yaml"
    regexp: " namespace: (.*)"
    replace: " namespace: {{ docker_registry_host }}/{{ docker_registry_namespace }}"
    backup: true

# update the container tag to match dlrn hash
- name: update container tag if needed in container-prepare-parameters.yaml
  when:
    - container_build_id != ''
  replace:
    path: "{{ working_dir }}/containers-prepare-parameters.yaml"
    regexp: " tag: (.*)"
    replace: " tag: {{ container_build_id }}"
    backup: true

# in extra-common/defaults
# docker_prep_prefix: "{{ ansible_distribution | lower }}-binary-"
- name: update container name_prefix for the appropriate distro
  replace:
    path: "{{ working_dir }}/containers-prepare-parameters.yaml"
    regexp: " name_prefix: (.*)"
    replace: " name_prefix: {{ docker_prep_prefix }}"
    backup: true

# ceph parameters
- name: update container ceph parameters
  when:
    - standalone_container_ceph_updates|bool or job.consumer_job|default(false)|bool
  replace:
    path: "{{ working_dir }}/containers-prepare-parameters.yaml"
    regexp: " {{ item.original }}: (.*)"
    replace: " {{ item.replace }}"
    backup: true
  with_items:
    - {original: "ceph_namespace", replace: "ceph_namespace: {{ docker_ceph_namespace }}"}
    - {original: "ceph_image", replace: "ceph_image: {{ docker_ceph_image }}"}
    - {original: "ceph_tag", replace: "ceph_tag: {{ docker_ceph_tag }}"}

- name: update container custom ceph parameters, if required
  when:
    - custom_ceph_parameters|bool
  replace:
    path: "{{ working_dir }}/containers-prepare-parameters.yaml"
    regexp: " {{ item.original }}: (.*)"
    replace: " {{ item.replace }}"
    backup: true
  with_items:
    - {original: "ceph_alertmanager_image", replace: "ceph_alertmanager_image: {{ custom_ceph_alertmanager_image }}"}
    - {original: "ceph_alertmanager_namespace", replace: "ceph_alertmanager_namespace: {{ custom_ceph_alertmanager_namespace }}"}
    - {original: "ceph_alertmanager_tag", replace: "ceph_alertmanager_tag: {{ custom_ceph_alertmanager_tag }}"}
    - {original: "ceph_grafana_image", replace: "ceph_grafana_image: {{ custom_ceph_grafana_image }}"}
    - {original: "ceph_grafana_namespace", replace: "ceph_grafana_namespace: {{ custom_ceph_grafana_namespace }}"}
    - {original: "ceph_grafana_tag", replace: "ceph_grafana_tag: {{ custom_ceph_grafana_tag }}"}
    - {original: "ceph_node_exporter_image", replace: "ceph_node_exporter_image: {{ custom_ceph_node_exporter_image }}"}
    - {original: "ceph_node_exporter_namespace", replace: "ceph_node_exporter_namespace: {{ custom_ceph_node_exporter_namespace }}"}
    - {original: "ceph_node_exporter_tag", replace: "ceph_node_exporter_tag: {{ custom_ceph_node_exporter_tag }}"}
    - {original: "ceph_prometheus_image", replace: "ceph_prometheus_image: {{ custom_ceph_prometheus_image }}"}
    - {original: "ceph_prometheus_namespace", replace: "ceph_prometheus_namespace: {{ custom_ceph_prometheus_namespace }}"}
    - {original: "ceph_prometheus_tag", replace: "ceph_prometheus_tag: {{ custom_ceph_prometheus_tag }}"}

# By using non_tripleo_containers.yml playbook in provider job, ceph related containers
# will be pulled from quay.io and pushed to local registry in content provider job.
# in order to consume it during deployment in consumer job, ceph containers namespaces
# needs to be updated in consumer job pointing to content provider job registry
# to pull respective containers.
# docker_ceph_namespace will point to local registry in consumer job, is setted in
# extra-common role.
- name: update container custom ceph parameters for consumer job
  when:
    - job.consumer_job|default(false)|bool
    - not custom_ceph_parameters|bool
  replace:
    path: "{{ working_dir }}/containers-prepare-parameters.yaml"
    regexp: " {{ item.original }}: (.*)"
    replace: " {{ item.replace }}"
    backup: true
  with_items:
    - {original: "ceph_alertmanager_namespace", replace: "ceph_alertmanager_namespace: {{ docker_ceph_namespace }}"}
    - {original: "ceph_grafana_namespace", replace: "ceph_grafana_namespace: {{ docker_ceph_namespace }}"}
    - {original: "ceph_node_exporter_namespace", replace: "ceph_node_exporter_namespace: {{ docker_ceph_namespace }}"}
    - {original: "ceph_prometheus_namespace", replace: "ceph_prometheus_namespace: {{ docker_ceph_namespace }}"}

- name: Set repos defined in the job to update
  when:
    - job.add_repos is defined
    - job.add_repos != []
    - standalone_container_prep_updates
    - not job.consumer_job | default(false) | bool
  block:
    - name: Create string of repos to update
      set_fact:
        add_repo_update_list: >-
          {% if job.add_repos[item|int].update_container|default(false) -%}
          {{ job.add_repos[item|int].reponame }}
          {% endif -%}
      with_sequence: start=0 end="{{ (job.add_repos|length -1)|int }}"
      register: add_repo_update_list_result

    - debug:
        var: add_repo_update_list

    - name: Add repos to update_repo
      set_fact:
        add_repos_update: "{{ add_repo_update_list_result.results | map(attribute='ansible_facts.add_repo_update_list') | list }}"
        cacheable: true
      when: add_repo_update_list_result|length > 0

    - debug:
        var: add_repos_update

    - name: Create string from list
      set_fact:
        add_repos_update:
          "{% if standalone_container_prep_update_repo|length >0 %},{% endif %}{{ add_repos_update | join(',') }}"
      when: add_repos_update|length > 0

- name: Load the container params file data
  slurp:
    src: "{{ working_dir }}/containers-prepare-parameters.yaml"
  register: containers_prepare_parameters

- name: Parse container params
  set_fact:
    containers_prepare_parameters_yaml: "{{ containers_prepare_parameters['content'] | b64decode | from_yaml }}"

# update params for container update
- name: Add updates to container-prepare-parameters.yaml
  when:
    - standalone_container_prep_updates
    - not build_container_images|default(false)|bool
    - not job.consumer_job | default(false) | bool
  block:
    - name: Generate modified containers file
      set_fact:
        containers_prepare_parameters_yaml: |-
          {% set imageParams = [] %}
          {% for item in containers_prepare_parameters_yaml['parameter_defaults']['ContainerImagePrepare'] %}
          {%   set _ = item.__setitem__("push_destination", local_docker_registry_host ~ ":8787") %}
          {%   set _ = item.__setitem__("modify_role", "tripleo-modify-image") %}
          {%   set _ = item.__setitem__("modify_append_tag", update_containers_append_tag) %}
          {%   set _ = item.__setitem__("modify_only_with_source", ["kolla", "tripleo"]) %}
          {%   set _ = item.__setitem__(
                "modify_vars",
                {
                  "tasks_from": "yum_update.yml",
                  "yum_repos_dir_path": "/etc/yum.repos.d",
                  "update_repo": standalone_container_prep_update_repo ~ add_repos_update | default('')
                }
              )
          %}
          {%   set _ = item.pop("tag_from_label", "") %}
          {%   set _ = imageParams.append(item) %}
          {% endfor %}
          {% set defaults = {"ContainerImagePrepare": imageParams} %}
          {{ {"parameter_defaults": defaults} }}

- name: Update rhel_containers value
  when:
    - ansible_distribution == 'RedHat'
  set_fact:
    containers_prepare_parameters_yaml: |-
      {% set imageParams = [] %}
      {% for item in (containers_prepare_parameters_yaml | from_yaml)['parameter_defaults']['ContainerImagePrepare'] %}
      {%   if "set" in item %}
      {%     set _ = item['set'].__setitem__("rhel_containers", true) %}
      {%   endif %}
      {%   set _ = imageParams.append(item) %}
      {% endfor %}
      {% set defaults = {"ContainerImagePrepare": imageParams} %}
      {{ {"parameter_defaults": defaults} }}

- name: Write containers-prepare-parameters.yaml
  copy:
    content: "{{ containers_prepare_parameters_yaml | to_nice_yaml }}"
    dest: "{{ working_dir }}/containers-prepare-parameters.yaml"

- name: Modify the insecure registry value when using podman
  when:
    - standalone_container_prep_updates
    - ansible_distribution == 'RedHat'
    - ansible_distribution_major_version|int >= 8
  replace:
    path: "{{ working_dir }}/standalone_parameters.yaml"
    regexp: " - 192.168.24.1:8787"
    replace: " - 192.168.24.1"
    backup: true
