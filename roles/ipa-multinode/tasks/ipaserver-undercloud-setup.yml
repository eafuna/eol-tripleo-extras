---
- set_fact:
    subnode_1_ip: "{{ hostvars['subnode-1'].inventory_ip }}"
    standalone_hostname: "standalone-0.{{ tripleo_domain }}"
    tripleo_domain: ooo.test
    ipa_domain: "{{ tripleo_domain }}"
    ipa_realm: "{{ ipa_domain | upper }}"
    ipa_user: admin
    ipa_password: "{{ freeipa_admin_password }}"
    ipa_nameserver: "ipa.{{ tripleo_domain }}"
    undercloud_hostname: "standalone-0.{{ tripleo_domain }}"
    cloud_domain: "{{ tripleo_domain }}"
    undercloud_cloud_domain: "{{ tripleo_domain }}"
    freeipa_server_hostname: "ipa.{{ tripleo_domain }}"
    freeipa_admin_password: fce95318204114530f31f885c9df588f
    enable_tls: true
    cacheable: true

- name: Add subnode IP to /etc/hosts
  lineinfile:
    line: "{{ subnode_1_ip }} {{ freeipa_server_hostname }}"
    path: /etc/hosts
  become: true

- name: Add {{ subnode_1_ip }} host to freeipa group
  add_host:
    name: "{{ freeipa_internal_ip }}"
    groups: freeipa

- name: set FQDN
  become: true
  hostname:
    name: "{{ undercloud_hostname }}"

- name: set hostname properly
  become: true
  lineinfile:
    dest: /etc/hosts
    line: "127.0.0.1 undercloud.localdomain localhost localhost.localdomain"
    regexp: '^127\.0\.0\.1'

- name: Including non_root_user_setup tasks list
  include_role:
    name: undercloud-setup
    tasks_from: non_root_user_setup
  tags:
    - standalone
  when: non_root_user_setup|bool

- name: Including repo-setup role
  include_role:
    name: repo-setup
  tags:
    - standalone

- name: Including package_installs tasks
  include_role:
    name: undercloud-setup
    tasks_from: package_installs
  when: package_installs|bool

- name: Including hostname tasks
  include_role:
    name: undercloud-setup
    tasks_from: hostname
  tags:
    - standalone
  when: hostname_correction|bool or step_set_undercloud_hostname|bool

- name: install tls dependencies
  become: true
  package:
    name: '{{ tls_packages }}'
    state: latest
  when:
    - enable_tls | bool

# We need to update /etc/resolv.conf so that the undercloud can use FreeIPA
# for DNS. We also need to make sure it's the first line in
# /etc/resolv.conf otherwise we'll fail to find FreeIPA (e.g.,
# ipa.ooo.test).
- name: ensure that DHCP doesn't overwite DNS settings (CentOS/RHEL >= 8)
  become: true
  lineinfile:
    path: /etc/NetworkManager/NetworkManager.conf
    regexp: '^dns='
    insertafter: '^[main]'
    line: 'dns=none'
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version(8, '>=')

- name: cat out resolv.conf to see original DNS config
  become: true
  debug:
    msg: "Content of resolv.conf before modifications: {{ lookup('file', '/etc/resolv.conf') }}"

- name: remove any existing entries from the resolv.conf file
  become: true
  lineinfile:
    path: /etc/resolv.conf
    regexp: "^nameserver "
    state: absent

- name: disable unbound service
  become: true
  service:
    name: unbound
    state: stopped
  ignore_errors: true

- name: set search domain
  become: true
  lineinfile:
    path: /etc/resolv.conf
    regexp: '^search'
    line: 'search {{ cloud_domain }}'
    state: present
  when:
    - cloud_domain == ipa_domain

- name: set IPA server as primary DNS provider
  become: true
  lineinfile:
    path: /etc/resolv.conf
    insertafter: '^search'
    line: "nameserver {{ freeipa_internal_ip }}"
    state: present

- name: run undercloud ipa installer as non-root user
  shell: >
    ansible-playbook -vvv
    --ssh-extra-args "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
    -e ipaclient_hostname="{{ undercloud_hostname }}"
    -e tripleo_ipa_client_install_packages=false
    /usr/share/ansible/tripleo-playbooks/undercloud-ipa-install.yaml
    | tee undercloud-ipa-install.log
  environment:
    IPA_DOMAIN: "{{ ipa_domain }}"
    IPA_REALM: "{{ ipa_realm }}"
    IPA_ADMIN_USER: "{{ ipa_user }}"
    IPA_ADMIN_PASSWORD: "{{ ipa_password }}"
    IPA_SERVER_HOSTNAME: "{{ ipa_nameserver }}"
    UNDERCLOUD_FQDN: "{{ undercloud_hostname }}"
    USER: zuul
    CLOUD_DOMAIN: "{{ cloud_domain }}"
    # yamllint disable-line rule:line-length
    ANSIBLE_ROLES_PATH: "/usr/share/ansible/tripleo-playbooks/roles:/home/zuul/.ansible/roles:/usr/share/ansible/roles:/etc/ansible/roles:/usr/share/ansible/tripleo-playbooks:{{ openstack_git_root }}/tripleo-ansible/tripleo_ansible/roles"
  when:
    - enable_tls | bool

- name: remove all other nameservers from resolv.conf
  become: true
  lineinfile:
    path: /etc/resolv.conf
    regexp: '^nameserver 127.0.0.1'
    state: absent

- name: debug nodepool_provider
  debug:
    msg: '{{ job.nodepool_provider }}'

- name: Set fact on nameserver to use as public
  set_fact:
    trunk_public_nameserver: "{{ job.public_name_server|default('8.8.8.8') }}"

- name: Register A record resolved by public nameserver - trunk.rdoproject.org
  shell: >
    dig +short @{{ trunk_public_nameserver }} trunk.rdoproject.org
  register: trunk_record_public

- name: Return A record resolved by public nameserver - trunk.rdoproject.org
  debug:
    msg: "{{ trunk_record_public.stdout_lines[1] }}"

- name: Register A record resolved by ipa nameserver - trunk.rdoproject.org
  shell: >
    dig +short @{{ ipa_nameserver }} trunk.rdoproject.org
  register: trunk_record_ipa

- name: Return host resolved by freeipa_address
  debug:
    msg: "{{ trunk_record_ipa.stdout_lines[1] }}"
  when: trunk_record_ipa.stdout_lines|length > 0

- name: Register A record resolved by public nameserver - releases.openstack.org
  shell: >
    dig +short @{{ trunk_public_nameserver }} releases.openstack.org
  register: releases_record_public

- name: Return A record resolved by public nameserver - releases.openstack.org
  debug:
    msg: "{{ releases_record_public.stdout_lines[2] }}"

- name: Register A record resolved by public nameserver - redhat.com
  shell: >
    dig +short @{{ trunk_public_nameserver }} redhat.com
  register: redhat_record_public

- name: Return A record resolved by public nameserver - redhat.com
  debug:
    msg: "{{ redhat_record_public.stdout_lines[0] }}"

- name: Register A record resolved by public nameserver - opendev.org
  shell: >
    dig +short @{{ trunk_public_nameserver }} opendev.org
  register: opendev_record_public

- name: Return A record resolved by public nameserver - opendev.org
  debug:
    msg: "{{ opendev_record_public.stdout_lines[0] }}"

- name: Register A record resolved by public nameserver - tarballs.opendev.org
  shell: >
    dig +short @{{ trunk_public_nameserver }} tarballs.opendev.org
  register: tarballs_record_public

- name: Return A record resolved by public nameserver - tarballs.opendev.org
  debug:
    msg: "{{ tarballs_record_public.stdout_lines[2] }}"

- name: Register A record resolved by public nameserver - github.com
  shell: >
    dig +short @{{ trunk_public_nameserver }} github.com
  register: github_record_public

- name: Return A record resolved by public nameserver - github.com
  debug:
    msg: "{{ github_record_public.stdout_lines[0] }}"

- name: Add entries to /etc/hosts for providers that don't resolve
  become: true
  lineinfile:
    path: /etc/hosts
    line: "{{ item }}"
    state: present
  with_items:
    - '{{ redhat_record_public.stdout_lines[0] }} redhat.com'
    - '{{ trunk_record_public.stdout_lines[1] }} trunk.rdoproject.org'
    - '{{ releases_record_public.stdout_lines[2] }} releases.openstack.org'
    - '{{ opendev_record_public.stdout_lines[0] }} opendev.org'
    - '{{ tarballs_record_public.stdout_lines[2] }} tarballs.opendev.org'
    - '{{ github_record_public.stdout_lines[0] }} github.com'

- name: check if /etc/ci/mirror_info.sh exists
  stat:
    path: /etc/ci/mirror_info.sh
  register: mirror_info_result

- name: Return RDO proxy when /etc/ci/mirror_info.sh exists
  when: mirror_info_result.stat.exists
  block:
    - name: get nodepool_mirror_host
      become: true
      shell: >
        cat /etc/ci/mirror_info.sh  | sed -n -e 's/export NODEPOOL_MIRROR_HOST=//p'
      register: nodepool_mirror_host

    - name: Return nodepool_mirror_host
      debug:
        msg: "{{ nodepool_mirror_host.stdout }}"

    - name: Register A record resolved by public nameserver - mirror host
      shell: >
        dig +short @{{ trunk_public_nameserver }} {{ nodepool_mirror_host.stdout }}
      register: mirror_host_record_public

    - name: Return A record resolved by public nameserver - mirror host
      debug:
        msg: "{{ mirror_host_record_public.stdout_lines[1] }}"
      when: mirror_host_record_public.stdout_lines|length >=2

    - name: Add entries to /etc/hosts for providers that don't resolve
      become: true
      lineinfile:
        path: /etc/hosts
        line: '{{ mirror_host_record_public.stdout_lines[1] }} {{ nodepool_mirror_host.stdout }}'
        state: present
      when: mirror_host_record_public.stdout_lines|length >=2

- name: Check that the DNS works
  shell: >
    dig +tries=5 +timeout=5 redhat.com
  register: dig_ouput_com
  ignore_errors: true

- debug:
    msg: "dig_ouput_com is {{ dig_ouput_com.stdout }}"

- name: Check curl works with DNS
  shell: >
    curl -s -S https://trunk.rdoproject.org/centos8/component/tripleo/ | grep 'consistent'
  register: curl_output

- debug:
    msg: "{{ curl_output.stdout }}"
